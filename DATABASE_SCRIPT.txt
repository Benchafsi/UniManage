/*
Deployment script for OPAUniversityDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OPAUniversityDB"
:setvar DefaultFilePrefix "OPAUniversityDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key  is skipped, element [dbo].[TEACHERS].[Id] (SqlSimpleColumn) will not be renamed to ID';


GO
PRINT N'Rename refactoring operation with key  is skipped, element [dbo].[STUDENTS].[Id] (SqlSimpleColumn) will not be renamed to ID';


GO
PRINT N'Rename refactoring operation with key  is skipped, element [dbo].[COURSES].[Id] (SqlSimpleColumn) will not be renamed to ID';


GO
PRINT N'Rename refactoring operation with key  is skipped, element [dbo].[STUDENTS_COURSES].[Id] (SqlSimpleColumn) will not be renamed to STUDENT_ID';


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Creating Table [dbo].[COURSES]...';


GO
CREATE TABLE [dbo].[COURSES] (
    [ID]          INT           IDENTITY (1, 1) NOT NULL,
    [DESCRIPTION] NVARCHAR (50) NULL,
    [TEACHER_ID]  INT           NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Index [dbo].[COURSES].[IX_Table_DESCRIPTION]...';


GO
CREATE NONCLUSTERED INDEX [IX_Table_DESCRIPTION]
    ON [dbo].[COURSES]([DESCRIPTION] ASC);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Table [dbo].[STUDENTS]...';


GO
CREATE TABLE [dbo].[STUDENTS] (
    [ID]        INT           IDENTITY (1, 1) NOT NULL,
    [FIRSTNAME] NVARCHAR (30) NULL,
    [LASTNAME]  NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Index [dbo].[STUDENTS].[IX_STUDENTS_LASTNAME]...';


GO
CREATE NONCLUSTERED INDEX [IX_STUDENTS_LASTNAME]
    ON [dbo].[STUDENTS]([LASTNAME] ASC);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Table [dbo].[STUDENTS_COURSES]...';


GO
CREATE TABLE [dbo].[STUDENTS_COURSES] (
    [STUDENT_ID] INT NOT NULL,
    [COURSE_ID]  INT NOT NULL,
    CONSTRAINT [PK_STUDENTS_COURSES] PRIMARY KEY CLUSTERED ([COURSE_ID] ASC, [STUDENT_ID] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Index [dbo].[STUDENTS_COURSES].[IX_STUDENTS_COURSES_STUDENT_ID]...';


GO
CREATE NONCLUSTERED INDEX [IX_STUDENTS_COURSES_STUDENT_ID]
    ON [dbo].[STUDENTS_COURSES]([STUDENT_ID] ASC);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Index [dbo].[STUDENTS_COURSES].[IX_STUDENTS_COURSES_COURSE_ID]...';


GO
CREATE NONCLUSTERED INDEX [IX_STUDENTS_COURSES_COURSE_ID]
    ON [dbo].[STUDENTS_COURSES]([COURSE_ID] ASC);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Table [dbo].[TEACHERS]...';


GO
CREATE TABLE [dbo].[TEACHERS] (
    [ID]        INT           IDENTITY (1, 1) NOT NULL,
    [FIRSTNAME] NVARCHAR (30) NULL,
    [LASTNAME]  NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Index [dbo].[TEACHERS].[IX_TEACHERS_LASTNAME]...';


GO
CREATE NONCLUSTERED INDEX [IX_TEACHERS_LASTNAME]
    ON [dbo].[TEACHERS]([LASTNAME] ASC);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Foreign Key [dbo].[FK_COURSES_ToTEACHERS]...';


GO
ALTER TABLE [dbo].[COURSES] WITH NOCHECK
    ADD CONSTRAINT [FK_COURSES_ToTEACHERS] FOREIGN KEY ([TEACHER_ID]) REFERENCES [dbo].[TEACHERS] ([ID]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Foreign Key [dbo].[FK_STUDENTS_COURSES_ToSTUDENTS]...';


GO
ALTER TABLE [dbo].[STUDENTS_COURSES] WITH NOCHECK
    ADD CONSTRAINT [FK_STUDENTS_COURSES_ToSTUDENTS] FOREIGN KEY ([STUDENT_ID]) REFERENCES [dbo].[STUDENTS] ([ID]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Foreign Key [dbo].[FK_STUDENTS_COURSES_ToCOURSES]...';


GO
ALTER TABLE [dbo].[STUDENTS_COURSES] WITH NOCHECK
    ADD CONSTRAINT [FK_STUDENTS_COURSES_ToCOURSES] FOREIGN KEY ([COURSE_ID]) REFERENCES [dbo].[COURSES] ([ID]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_COURSES_DESCRIPTION]...';


GO
ALTER TABLE [dbo].[COURSES] WITH NOCHECK
    ADD CONSTRAINT [CK_COURSES_DESCRIPTION] CHECK (LEN(DESCRIPTION) >= 3);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_STUDENTS_FIRSTNAME]...';


GO
ALTER TABLE [dbo].[STUDENTS] WITH NOCHECK
    ADD CONSTRAINT [CK_STUDENTS_FIRSTNAME] CHECK (LEN(FIRSTNAME) >= 3);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_STUDENTS_LASTNAME]...';


GO
ALTER TABLE [dbo].[STUDENTS] WITH NOCHECK
    ADD CONSTRAINT [CK_STUDENTS_LASTNAME] CHECK (LEN(LASTNAME) >= 3);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_TEACHERS_FIRSTNAME]...';


GO
ALTER TABLE [dbo].[TEACHERS] WITH NOCHECK
    ADD CONSTRAINT [CK_TEACHERS_FIRSTNAME] CHECK (LEN(FIRSTNAME) >= 3);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_TEACHERS_LASTNAME]...';


GO
ALTER TABLE [dbo].[TEACHERS] WITH NOCHECK
    ADD CONSTRAINT [CK_TEACHERS_LASTNAME] CHECK (LEN(LASTNAME) >= 3);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[COURSES] WITH CHECK CHECK CONSTRAINT [FK_COURSES_ToTEACHERS];

ALTER TABLE [dbo].[STUDENTS_COURSES] WITH CHECK CHECK CONSTRAINT [FK_STUDENTS_COURSES_ToSTUDENTS];

ALTER TABLE [dbo].[STUDENTS_COURSES] WITH CHECK CHECK CONSTRAINT [FK_STUDENTS_COURSES_ToCOURSES];

ALTER TABLE [dbo].[COURSES] WITH CHECK CHECK CONSTRAINT [CK_COURSES_DESCRIPTION];

ALTER TABLE [dbo].[STUDENTS] WITH CHECK CHECK CONSTRAINT [CK_STUDENTS_FIRSTNAME];

ALTER TABLE [dbo].[STUDENTS] WITH CHECK CHECK CONSTRAINT [CK_STUDENTS_LASTNAME];

ALTER TABLE [dbo].[TEACHERS] WITH CHECK CHECK CONSTRAINT [CK_TEACHERS_FIRSTNAME];

ALTER TABLE [dbo].[TEACHERS] WITH CHECK CHECK CONSTRAINT [CK_TEACHERS_LASTNAME];


GO
PRINT N'Update complete.';


GO

/*
Deployment script for OPAUniversityDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "OPAUniversityDB"
:setvar DefaultFilePrefix "OPAUniversityDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Dropping Check Constraint [dbo].[CK_COURSES_DESCRIPTION]...';


GO
ALTER TABLE [dbo].[COURSES] DROP CONSTRAINT [CK_COURSES_DESCRIPTION];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Dropping Check Constraint [dbo].[CK_TEACHERS_FIRSTNAME]...';


GO
ALTER TABLE [dbo].[TEACHERS] DROP CONSTRAINT [CK_TEACHERS_FIRSTNAME];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Dropping Check Constraint [dbo].[CK_TEACHERS_LASTNAME]...';


GO
ALTER TABLE [dbo].[TEACHERS] DROP CONSTRAINT [CK_TEACHERS_LASTNAME];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_COURSES_DESCRIPTION]...';


GO
ALTER TABLE [dbo].[COURSES] WITH NOCHECK
    ADD CONSTRAINT [CK_COURSES_DESCRIPTION] CHECK (len([DESCRIPTION]) >= (3));


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_TEACHERS_FIRSTNAME]...';


GO
ALTER TABLE [dbo].[TEACHERS] WITH NOCHECK
    ADD CONSTRAINT [CK_TEACHERS_FIRSTNAME] CHECK (len([FIRSTNAME]) >= (3));


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating Check Constraint [dbo].[CK_TEACHERS_LASTNAME]...';


GO
ALTER TABLE [dbo].[TEACHERS] WITH NOCHECK
    ADD CONSTRAINT [CK_TEACHERS_LASTNAME] CHECK (len([LASTNAME]) >= (3));


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF OBJECT_ID(N'tempdb..#tmpErrors') IS NULL
    CREATE TABLE [#tmpErrors] (
        Error INT
    );

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[COURSES] WITH CHECK CHECK CONSTRAINT [CK_COURSES_DESCRIPTION];

ALTER TABLE [dbo].[TEACHERS] WITH CHECK CHECK CONSTRAINT [CK_TEACHERS_FIRSTNAME];

ALTER TABLE [dbo].[TEACHERS] WITH CHECK CHECK CONSTRAINT [CK_TEACHERS_LASTNAME];


GO
PRINT N'Update complete.';


GO

